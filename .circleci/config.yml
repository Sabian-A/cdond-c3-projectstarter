version: 2.1
orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7} "
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            #exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}    
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7})
            # SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
              #exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            # exit 1
      - slack/notify:
          channel: cicd
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            # exit 1
      - slack/notify:
          channel: cicd
          event: fail
          template: basic_fail_1      
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          channel: cicd
          event: fail
          template: basic_fail_1
            
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          channel: cicd
          event: fail
          template: basic_fail_1
            
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
            
      - slack/notify:
          channel: cicd
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
            
      - slack/notify:
          channel: cicd
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend  \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              #exit 1
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-backend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              #exit 1
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople-backend" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            #exit 1
      
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - revert-migrations
      - destroy-environment
  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
      - add_ssh_keys:
          fingerprints: ["32:9c:b2:41:b0:b0:7b:2a:67:49:74:98:a2:f3:eb:68"]
      - attach_workspace:
          at: ~/
      
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: migrations
          command: |
            cd backend
            npm install
      - run:
          name: Run migrations
          command: |
            cd backend
            
            touch migrations_dump.txt
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/GtGbDoEvT8RZb2L6PJkYPU/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment
      - revert-migrations
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:project,Values=udapeople-backend" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "API_URL=http://${PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations     
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
      - add_ssh_keys:
          fingerprints: ["d9:06:93:7c:dd:ac:25:bf:3d:f3:10:f5:5d:69:f6:67"]
      - attach_workspace:
          at: ~/project
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build 
            cd ..
            
            # Zip the directory
            # tar -C ../../../backend -czvf artifact.tar.gz .
            tar -czvf artifact.tar.gz .
            sleep 20
            cp .circleci/ansible/roles/deploy/files/
            
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations
  smoke-test:
    docker:
      - image: cimg/base:stable 
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
      
      # - run:
      #     name: Backend smoke test.
      #     command: |

      #       PUBLIC_IP=$(aws ec2 describe-instances \
      #         --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #         --output text)
      #       export API_URL=http://${PUBLIC_IP}:3030
      #       if curl -s $API_URL/api/status | grep "Welcome"
      #       then
      #         exit 0
      #       else
      #         exit 1
      #       fi
      - run:
          name: Get Backend IP and Backend smoke test.
          command: |
            PUBLIC_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend" \
              --output text)
            echo $PUBLIC_IP
            sleep 60
            export URL="http://$PUBLIC_IP:3030/api/status"
            curl $URL 
            if curl -s $URL | grep "ok"
            then
              return 0
            else
              return 1
            fi
            
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations
  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
      
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name InitialStack
      - destroy-environment
      - revert-migrations
      #for ret
# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend:
          context: Environment variables
      - build-backend:
          context: Environment variables
      - test-frontend:
          context: Environment variables
          requires: [build-frontend]
      - test-backend:
          context: Environment variables
          requires: [build-backend]
      - scan-backend:
          context: Environment variables
          requires: [build-backend]
      - scan-frontend:
          context: Environment variables
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: 
                - master
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]